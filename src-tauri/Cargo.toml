[package]
name = "weibo-login"
version = "0.1.0"
description = "微博扫码登录获取Cookies - Desktop Application"
authors = ["Code Artisan"]
license = ""
repository = ""
edition = "2021"
default-run = "weibo-login"

# 构建配置: 优化性能与二进制大小
[profile.release]
panic = "abort"      # 减小二进制大小
codegen-units = 1    # 更好的优化
lto = true           # 链接时优化
opt-level = "z"      # 优化大小
strip = true         # 移除调试符号

[build-dependencies]
tauri-build = { version = "2", features = [] }

[dependencies]
# Tauri核心: 桌面应用框架
tauri = { version = "2", features = [] }
# Tauri Shell插件: 提供打开URL等shell操作能力 (Tauri 2.x中shell功能已从核心移至插件)
tauri-plugin-shell = "2"

# 序列化: 数据结构与JSON互转
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# 异步运行时: tokio作为async/await的基础
tokio = { version = "1.35", features = ["full"] }
# Tokio工具: CancellationToken用于任务取消
tokio-util = "0.7"

# HTTP客户端: 调用微博API,自动管理cookies (使用rustls避免系统OpenSSL依赖)
reqwest = { version = "0.11", default-features = false, features = ["json", "cookies", "rustls-tls", "blocking"] }

# WebSocket: 服务器和客户端支持
tokio-tungstenite = { version = "0.21", features = ["rustls-tls-native-roots"] }
futures-util = "0.3"

# 浏览器自动化: Chrome DevTools Protocol (POC 功能)
chromiumoxide = { version = "0.7.0", optional = true }

# Base64 编码: QR code 图片转换 (POC 功能)
base64 = { version = "0.22", optional = true }

# 单例模式: 全局浏览器实例 (POC 功能)
once_cell = { version = "1.19", optional = true }

# Redis客户端: 持久化存储cookies
redis = { version = "0.27", features = ["tokio-comp", "connection-manager"] }
deadpool-redis = "0.18"  # 连接池,复用连接提升性能 (兼容 redis 0.27)

# PostgreSQL客户端: 简化数据存储架构
sqlx = { version = "0.8", features = ["runtime-tokio-rustls", "postgres", "uuid", "chrono", "json", "macros"] }

# 错误处理: 结构化错误定义
thiserror = "1.0"

# 时间处理: cookies过期时间,日志时间戳
chrono = { version = "0.4", features = ["serde"] }

# 结构化日志: 记录系统运行状态
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["json", "env-filter"] }
tracing-appender = "0.2"

# UUID生成: 生成QR code请求的唯一标识
uuid = { version = "1.6", features = ["v4", "serde"] }

# Future工具: 并发执行异步任务
futures = "0.3"

# 系统工具: 查找可执行文件路径
which = "5.0"

# 版本解析: 语义化版本比较
semver = "1.0"

# 正则表达式: 版本号解析
regex = "1.10"

# 系统目录路径: 获取配置目录等系统路径 (Tauri 2.x中替代 tauri::api::path)
dirs = "5.0"

# 随机数生成: 随机延迟,防反爬
rand = "0.8"

# 环境变量加载: 数据库配置管理
dotenvy = "0.15"

# 库配置: 支持集成测试
[lib]
name = "weibo_login"
path = "src/lib.rs"

[features]
# Tauri默认功能: 自定义协议用于前后端通信
default = ["custom-protocol", "playwright-server"]
custom-protocol = ["tauri/custom-protocol"]

# 浏览器后端选择
playwright-server = []  # 使用外部 Playwright Server (稳定,默认)
rust-browser-poc = ["chromiumoxide", "base64", "once_cell"]  # 使用 Rust POC (实验性)

# 契约测试
[[test]]
name = "contract_create_crawl_task"
path = "../tests/contract/test_create_crawl_task.rs"

[[test]]
name = "contract_tests"
path = "../tests/contract/test_export_crawl_data.rs"

[[test]]
name = "contract_get_crawl_progress"
path = "../tests/contract/test_get_crawl_progress.rs"

# 单元测试
[[test]]
name = "unit_time_utils"
path = "tests/unit/test_time_utils.rs"

[[test]]
name = "unit_weibo_post_validation"
path = "tests/unit/test_weibo_post_validation.rs"

[[test]]
name = "unit_crawl_task_model"
path = "tests/unit/test_crawl_task_model.rs"

# 性能测试
[[test]]
name = "perf_redis_performance"
path = "tests/performance/test_redis_performance.rs"

[[test]]
name = "perf_redis_connection"
path = "tests/performance/test_redis_connection.rs"
