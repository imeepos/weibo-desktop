# Docker Compose 配置 - 微博扫码登录桌面应用
# 包含所有必备中间件: Redis, PostgreSQL, MongoDB, RabbitMQ
#
# 使用方法:
#   启动所有服务: docker compose up -d
#   启动指定服务: docker compose up redis postgres -d
#   查看日志: docker compose logs -f [service_name]
#   停止服务: docker compose down
#   停止并删除数据: docker compose down -v

version: '3.8'

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
  postgres-data:
  mongodb-data:
  rabbitmq-data:

services:
  # ==========================================
  # Redis 7 - 缓存 & 会话存储
  # ==========================================
  redis:
    image: redis:7.2-alpine
    container_name: desktop-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      app-network:
        ipv4_address: 172.28.0.10
    command: redis-server --appendonly yes --requirepass ""
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    environment:
      - TZ=Asia/Shanghai

  # ==========================================
  # PostgreSQL 15 - 关系型数据库
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: desktop-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      app-network:
        ipv4_address: 172.28.0.11
    environment:
      POSTGRES_DB: weibo_desktop
      POSTGRES_USER: desktop_user
      POSTGRES_PASSWORD: desktop_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Shanghai
      PGTZ: Asia/Shanghai
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U desktop_user -d weibo_desktop"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========================================
  # MongoDB 7 - 文档数据库
  # ==========================================
  mongodb:
    image: mongo:7.0
    container_name: desktop-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      app-network:
        ipv4_address: 172.28.0.12
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root_pass
      MONGO_INITDB_DATABASE: weibo_desktop
      TZ: Asia/Shanghai
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========================================
  # RabbitMQ 3.12 - 消息队列
  # ==========================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: desktop-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"    # AMQP协议端口
      - "15672:15672"  # 管理界面端口
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      app-network:
        ipv4_address: 172.28.0.13
    environment:
      RABBITMQ_DEFAULT_USER: desktop_user
      RABBITMQ_DEFAULT_PASS: desktop_pass
      RABBITMQ_DEFAULT_VHOST: /weibo_desktop
      TZ: Asia/Shanghai
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========================================
  # Mongo Express - MongoDB Web UI (可选)
  # ==========================================
  mongo-express:
    image: mongo-express:latest
    container_name: desktop-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root_pass
      ME_CONFIG_MONGODB_URL: mongodb://root:root_pass@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
      TZ: Asia/Shanghai
    profiles:
      - debug  # 使用 docker compose --profile debug up 启动

  # ==========================================
  # Playwright 验证服务器 - 微博Cookies验证
  # ==========================================
  playwright-server:
    build:
      context: .
      dockerfile: Dockerfile.playwright
    container_name: desktop-playwright-server
    working_dir: /workspace/desktop/playwright
    volumes:
      - ./playwright:/workspace/desktop/playwright
      - /workspace/desktop/playwright/node_modules
    networks:
      app-network:
        ipv4_address: 172.28.0.14
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:Redis2025Complex@43.240.223.138:6379
      - PORT=3000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    command: |
      bash -c "
        cd /workspace/desktop/playwright &&
        pnpm install --frozen-lockfile &&
        pnpm exec playwright install chromium --with-deps &&
        pnpm run build &&
        pnpm run server
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    shm_size: '2gb'
    restart: unless-stopped

  # ==========================================
  # Playwright 测试环境 - E2E测试
  # ==========================================
  playwright-tests:
    image: mcr.microsoft.com/playwright:v1.40.0-jammy
    container_name: desktop-playwright-tests
    working_dir: /workspace/desktop
    volumes:
      - .:/workspace/desktop
      - /workspace/desktop/node_modules
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      playwright-server:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:Redis2025Complex@43.240.223.138:6379
      - PLAYWRIGHT_SERVER_URL=http://172.28.0.14:3000
      - CI=true
      - PLAYWRIGHT_HEADLESS=true
      - PWDEBUG=0
    command: |
      bash -c "
        pnpm install --frozen-lockfile &&
        pnpm exec playwright install chromium --with-deps &&
        pnpm test:e2e
      "
    shm_size: '2gb'
    profiles:
      - test  # 使用 docker compose --profile test up 启动

  # ==========================================
  # Tauri 开发环境 (可选)
  # ==========================================
  tauri-dev:
    build:
      context: .
      dockerfile: Dockerfile.playwright
    container_name: desktop-tauri-dev
    working_dir: /workspace/desktop
    volumes:
      - .:/workspace/desktop
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      playwright-server:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:Redis2025Complex@43.240.223.138:6379
      - DATABASE_URL=postgresql://desktop_user:desktop_pass@172.28.0.11:5432/weibo_desktop
      - MONGODB_URL=mongodb://root:root_pass@172.28.0.12:27017/weibo_desktop?authSource=admin
      - RABBITMQ_URL=amqp://desktop_user:desktop_pass@172.28.0.13:5672/weibo_desktop
      - PLAYWRIGHT_SERVER_URL=http://172.28.0.14:3000
      - DISPLAY=:99
      - RUST_LOG=info
    ports:
      - "1420:1420"
    command: |
      bash -c "
        Xvfb :99 -screen 0 1280x720x24 &
        pnpm install &&
        pnpm tauri dev
      "
    shm_size: '2gb'
    profiles:
      - dev  # 使用 docker compose --profile dev up 启动
